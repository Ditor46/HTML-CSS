<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Escolha da Caixa Ideal</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 8px;
            text-align: center;
        }
        button {
            margin-left: 10px;
        }
        #canvasContainer {
            position: relative;
            width: 1000px;
            height: 1000px;
            border: 1px solid #000;
            margin-bottom: 20px;
        }
        canvas {
            position: absolute;
            top: 0;
            left: 0;
        }
    </style>
</head>
<body>

<h1>Escolha da Caixa Ideal</h1>

<h2>Lista de Caixas</h2>
<table>
    <thead>
        <tr>
            <th>RC</th>
            <th>PC (mm)</th>
            <th>HC (mm)</th>
            <th>LC (mm)</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>B05</td>
            <td>90</td>
            <td>250</td>
            <td>250</td>
        </tr>
        <tr>
            <td>B06</td>
            <td>80</td>
            <td>165</td>
            <td>220</td>
        </tr>
        <tr>
            <td>A11</td>
            <td>120</td>
            <td>300</td>
            <td>300</td>
        </tr>
    </tbody>
</table>

<h2>Lista de Itens</h2>
<table>
    <thead>
        <tr>
            <th>RI</th>
            <th>PI (mm)</th>
            <th>HI (mm)</th>
            <th>LI (mm)</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>CHANDON</td>
            <td>60</td>
            <td>210</td>
            <td>60</td>
        </tr>
        <tr>
            <td>TACA</td>
            <td>55</td>
            <td>200</td>
            <td>55</td>
        </tr>
        <tr>
            <td>PORTAJOIA</td>
            <td>40</td>
            <td>100</td>
            <td>100</td>
        </tr>
    </tbody>
</table>

<h2>Seleção de Itens</h2>
<select id="itemSelect" multiple>
    <option value="CHANDON">CHANDON</option>
    <option value="TACA">TACA</option>
    <option value="PORTAJOIA">PORTAJOIA</option>
</select>
<button id="addButton">Adicionar Item</button>

<h2>Itens Selecionados</h2>
<ul id="selectedItems"></ul>

<button id="findBoxButton">Encontrar Caixa Ideal</button>
<div id="result"></div>

<!-- Canvas for drawing -->
<div id="canvasContainer">
    <canvas id="canvas" width="1000" height="1000"></canvas>
</div>
<button id="downloadButton">Baixar PDF</button>
<button id="resetButton">Resetar Canvas</button>

<script>
const selectedItems = [];
let boxPosition = { x: 10, y: 10 };
let isDragging = false;
let selectedItem = null;
let dragOffset = { x: 0, y: 0 };

document.getElementById('addButton').addEventListener('click', function() {
    const select = document.getElementById('itemSelect');
    const selectedOptions = Array.from(select.selectedOptions);

    // Verifica se há um item selecionado
    if (selectedOptions.length === 0) {
        alert("Por favor, selecione um item para adicionar.");
        return; // Sai da função se não houver seleção
    }

    // Adiciona cada item selecionado
    selectedOptions.forEach(option => {
        const itemText = option.text;
        const itemValue = option.value;

        // Permite múltiplos itens do mesmo tipo
        selectedItems.push({ text: itemText, value: itemValue });
        updateSelectedItems(); // Atualiza a lista de itens selecionados
    });
});

function updateSelectedItems() {
    const list = document.getElementById('selectedItems');
    list.innerHTML = "";
    selectedItems.forEach(item => {
        const li = document.createElement('li');
        li.textContent = item.text;

        const removeButton = document.createElement('button');
        removeButton.textContent = 'Remover';
        removeButton.addEventListener('click', function() {
            removeItem(item);
        });

        li.appendChild(removeButton);
        list.appendChild(li);
    });
}

function removeItem(itemToRemove) {
    const index = selectedItems.findIndex(item => item.value === itemToRemove.value);
    if (index > -1) {
        selectedItems.splice(index, 1);
        updateSelectedItems();
    }
}

document.getElementById('findBoxButton').addEventListener('click', function() {
    if (selectedItems.length === 0) {
        document.getElementById('result').textContent = "Por favor, selecione ao menos um item.";
        return;
    }

    const boxes = [
        { RC: 'B05', PC: 90, HC: 250, LC: 250 },
        { RC: 'B06', PC: 80, HC: 165, LC: 220 },
        { RC: 'A11', PC: 120, HC: 300, LC: 300 }
    ];

    const items = {
        'CHANDON': { PI: 60, HI: 210, LI: 60 },
        'TACA': { PI: 55, HI: 200, LI: 55 },
        'PORTAJOIA': { PI: 40, HI: 100, LI: 100 }
    };

    let bestBox = null;
    let boxDimensions = null;

    for (const box of boxes) {
        const pc = box.PC - 5;
        const hc = box.HC - 10;
        const lc = box.LC - 10;

        let canFit = true;
        let currentColumnHeight = 0;
        let currentColumnWidth = 0;

        for (const selectedItem of selectedItems) {
            const item = items[selectedItem.value];

            if (pc < item.PI || hc < (item.HI + 10)) {
                canFit = false;
                break;
            }

            if (currentColumnHeight + item.HI > hc) {
                currentColumnHeight = 0;
                currentColumnWidth += item.LI + 10;
            }

            currentColumnHeight += item.HI + 10;
        }

        if (canFit) {
            bestBox = box.RC;
            boxDimensions = { LC: lc, HC: hc };
            break;
        }
    }

    if (bestBox) {
        document.getElementById('result').textContent = `Caixa Ideal Encontrada: ${bestBox}`;
        drawCanvas(bestBox, selectedItems, boxDimensions);
    } else {
        document.getElementById('result').textContent = "Nenhuma caixa adequada encontrada para os itens selecionados.";
    }
});

function drawCanvas(boxRef, selectedItems, boxDimensions) {
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.strokeStyle = 'black';
    ctx.strokeRect(boxPosition.x, boxPosition.y, boxDimensions.LC, boxDimensions.HC);

    const itemDetails = {
        'CHANDON': { HI: 210, LI: 60 },
        'TACA': { HI: 200, LI: 55 },
        'PORTAJOIA': { HI: 100, LI: 100 }
    };

    let currentX = boxPosition.x;
let currentX = boxPosition.x;
const itemSpaces = 10;
let maxColumnHeight = 0;
let itemPositions = [];

selectedItems.forEach(item => {
    const itemDimensions = itemDetails[item.value];
    const itemHI = itemDimensions.HI;
    const itemLI = itemDimensions.LI;

    // Verifica se o item cabe na coluna atual
    if (maxColumnHeight + itemHI > boxDimensions.HC) {
        currentX += itemLI + itemSpaces; // Mova para a próxima coluna
        maxColumnHeight = 0; // Reinicie a altura da coluna
    }

    const itemY = boxPosition.y + maxColumnHeight + itemSpaces; // Calculate item position
    ctx.strokeStyle = 'red'; // Contorno vermelho
    ctx.strokeRect(currentX, itemY, itemLI, itemHI); // Desenhar o item

    itemPositions.push({ name: item.value, x: currentX, y: itemY, width: itemLI, height: itemHI });

    maxColumnHeight += itemHI + itemSpaces; // Adiciona espaço para o próximo item
});

// Função para obter a posição do mouse no canvas
function getMousePos(evt) {
    const rect = canvas.getBoundingClientRect();
    return {
        x: evt.clientX - rect.left,
        y: evt.clientY - rect.top
    };
}

// Adiciona eventos para arrastar o contorno da caixa
canvas.addEventListener('mousedown', (e) => {
    const mousePos = getMousePos(e);

    // Verifica se a caixa foi clicada
    if (
        mousePos.x >= boxPosition.x && 
        mousePos.x <= boxPosition.x + boxDimensions.LC &&
        mousePos.y >= boxPosition.y && 
        mousePos.y <= boxPosition.y + boxDimensions.HC
    ) {
        isDragging = true;
        dragOffset.x = mousePos.x - boxPosition.x;
        dragOffset.y = mousePos.y - boxPosition.y;
    } else {
        // Seleciona um item arrastável
        selectedItem = itemPositions.find(item =>
            mousePos.x >= item.x &&
            mousePos.x <= item.x + item.width &&
            mousePos.y >= item.y &&
            mousePos.y <= item.y + item.height
        );
        if (selectedItem) {
            isDragging = true;
            dragOffset.x = mousePos.x - selectedItem.x;
            dragOffset.y = mousePos.y - selectedItem.y;
        }
    }
});

canvas.addEventListener('mousemove', (e) => {
    if (isDragging) {
        const mousePos = getMousePos(e);

        if (selectedItem) {
            // Arrastar item
            selectedItem.x = mousePos.x - dragOffset.x;
            selectedItem.y = mousePos.y - dragOffset.y;
        } else {
            // Arrastar a caixa
            boxPosition.x = mousePos.x - dragOffset.x;
            boxPosition.y = mousePos.y - dragOffset.y;
        }

        // Redesenhar os itens no canvas
        drawItems();
    }
});

canvas.addEventListener('mouseup', () => {
    isDragging = false;
    selectedItem = null; // Resetar o item arrastado
});

canvas.addEventListener('mouseleave', () => {
    isDragging = false;
    selectedItem = null; // Resetar se o mouse sair do canvas
});

// Função para limpar e desenhar os itens com as novas posições
function drawItems() {
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Re-desenhar o retângulo da caixa (contorno preto)
    ctx.strokeStyle = 'black';
    ctx.strokeRect(boxPosition.x, boxPosition.y, boxDimensions.LC, boxDimensions.HC);

    // Redesenhar os itens com as novas posições
    itemPositions.forEach(item => {
        ctx.strokeStyle = 'red'; // Contorno vermelho
        ctx.strokeRect(item.x, item.y, item.width, item.height);
    });
}

// Adiciona o evento para baixar PDF
document.getElementById('downloadButton').addEventListener('click', function() {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    // Adiciona o conteúdo que você deseja no PDF
    doc.setFontSize(16);
    doc.text("Escolha da Caixa Ideal", 10, 10);
    
    // Adicione qualquer lógica adicional para preencher o PDF
    doc.save('caixa_ideal.pdf');
});

// Adiciona o evento para resetar o canvas
document.getElementById('resetButton').addEventListener('click', function() {
    selectedItems.length = 0; // Limpar itens selecionados
    updateSelectedItems(); // Atualizar a lista de itens selecionados
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    ctx.clearRect(0, 0, canvas.width, canvas.height); // Limpar canvas
    boxPosition = { x: 10, y: 10 }; // Resetar posição da caixa
});

// Função principal para inicializar eventos e configurações
function init() {
    // Inicializa a canvas e a seleção de itens
    // O botão de adicionar já está configurado, não há necessidade de duplicar aqui.
}

// Inicializa eventos e configurações
init();
</script>

<!-- Inclusão da biblioteca jsPDF -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.4.0/jspdf.umd.min.js"></script>
</body>
</html>